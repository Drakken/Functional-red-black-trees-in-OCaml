
This is a module for using red-black trees in OCaml. It can be 
used to store simple elements that can be compared with (<), (=), 
and (>), or for more complicated types in real-world applications. 
Against Chris Okasaki's advice*, it uses a functional version of 
the conventional rebalancing system, which searches for red nodes 
near a node that has just been deleted. The rebalancing function 
is called at each step as the recursion of the delete function 
unwinds, even after the tree has been rebalanced, but the function's 
return value carries a flag that indicates whether the rebalancing 
is done, so all it has to do with a subtree that has been rebalanced 
is inspect the flag and return.

empty: an empty tree

insert e t: add an element to a tree
insert_unique e t: don't insert if the element is already in the tree

remove e t: remove an element from a tree
remove_all e t: remove all nodes containing the element

size t: the number of nodes in a tree
is_member e t: whether an element is in a tree

of_list: element list -> t
to_list: t -> element list

union t1 t2: two trees merged
union_unique: union with no duplicates

fold f acc t: fold_left for trees

iter f t: in-order iteration
iteri f t: iter with in-order numbering of nodes

Make (Element): a functor to create modules for complex elements
 
Element_Type: the type of a module you will have to create to use Make.
              Your module must contain these items:

    t: the type of elements
    k: the type of element keys
    v: the type of element values
    key e: returns the element's key
    value e: returns the element's value
    compare k1 k2: the comparison function. Returns zero for equal keys,
                   a negative integer when k1 belongs before k2, and
                   a positive integer when k1 belongs after k2.

For modules generated by Make, the following functions take a key
instead of an element:

find k t: looks for a key and returns an element option
value k t: find with the value extracted from the element



 
*Chris Okasaki, Red-Black Trees in a Functional Setting, J. Functional Programming, January 1993

